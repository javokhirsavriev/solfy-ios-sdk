// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Solfy
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CoreImage.CIFilterBuiltins
import Combine
import CoreImage
import CoreML
import CoreVideo
import DeveloperToolsSupport
import Foundation
@_exported import Solfy
import Swift
import SwiftUI
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum SolfyEntryMode : Swift.Int {
  case SelfieOnly = 0
  case SelfieAndPassport
  case PassportOnly
  case FullIdent
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol SolfyClientDelegate {
  @objc func onCompletion(action: Solfy.SolfyAction)
}
@_inheritsConvenienceInitializers @objc public class SolfyResult : ObjectiveC.NSObject {
  @objc public var personalNumber: Swift.String
  @objc public var idSeriesNumber: Swift.String
  @objc public var selfie: UIKit.UIImage?
  @objc public var documentFront: UIKit.UIImage?
  @objc public var documentBack: UIKit.UIImage?
  @objc public var faceData: Swift.String?
  @objc public var videoURL: Foundation.URL?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SolfyAppearance : ObjectiveC.NSObject {
  @objc public var colorPrimary: UIKit.UIColor?
  @objc public var colorOnPrimary: UIKit.UIColor?
  @objc public var colorBackground: UIKit.UIColor?
  @objc public var colorOnBackground: UIKit.UIColor?
  @objc public var colorOutline: UIKit.UIColor?
  @objc public var colorProgressIndicatorActive: UIKit.UIColor?
  @objc public var colorProgressIndicatorInactive: UIKit.UIColor?
  @objc public var colorSuccess: UIKit.UIColor?
  @objc public var colorError: UIKit.UIColor?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SolfyPresentationStyle : Swift.Int {
  case Full = 0
  case Sheet
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SolfyGraphicFieldType : Swift.Int {
  case Selfie = 0
  case DocumentFront
  case DocumentBack
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SolfyConfig : ObjectiveC.NSObject {
  @objc public var locale: Solfy.SolfyLocale
  @objc public var entryMode: Solfy.SolfyEntryMode
  @objc public var presentationStyle: Solfy.SolfyPresentationStyle
  @objc public var appearance: Solfy.SolfyAppearance?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SolfyClient : ObjectiveC.NSObject {
  @objc public class func showScanner(withConfig config: Solfy.SolfyConfig, withDelegate delegate: any Solfy.SolfyClientDelegate)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum SolfyLocale : Swift.Int {
  case Kyrgyz = 0
  case English
  case Russian
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SolfyAction : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc public class Complete : Solfy.SolfyAction {
    @objc public var result: Solfy.SolfyResult
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class Error : Solfy.SolfyAction {
    @objc public var exception: Solfy.SolfyException
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class Permission : Solfy.SolfyAction {
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc public class Cancel : Solfy.SolfyAction {
    @objc override dynamic public init()
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class SolfyException : ObjectiveC.NSObject {
  @objc public var message: Swift.String?
  @objc public var code: Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
extension Solfy.SolfyEntryMode : Swift.Equatable {}
extension Solfy.SolfyEntryMode : Swift.Hashable {}
extension Solfy.SolfyEntryMode : Swift.RawRepresentable {}
extension Solfy.SolfyPresentationStyle : Swift.Equatable {}
extension Solfy.SolfyPresentationStyle : Swift.Hashable {}
extension Solfy.SolfyPresentationStyle : Swift.RawRepresentable {}
extension Solfy.SolfyGraphicFieldType : Swift.Equatable {}
extension Solfy.SolfyGraphicFieldType : Swift.Hashable {}
extension Solfy.SolfyGraphicFieldType : Swift.RawRepresentable {}
extension Solfy.SolfyLocale : Swift.Equatable {}
extension Solfy.SolfyLocale : Swift.Hashable {}
extension Solfy.SolfyLocale : Swift.RawRepresentable {}
